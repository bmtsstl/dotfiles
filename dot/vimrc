" ----- initialize ------------------------------

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:dir_vim      = expand('<sfile>:p:h')
let s:dir_autoload = s:dir_vim . '/autoload'
let s:dir_backup   = s:dir_vim . '/backup'
let s:dir_plug     = s:dir_vim . '/plug'
let s:dir_swap     = s:dir_vim . '/swap'
let s:dir_undo     = s:dir_vim . '/undo'

let s:file_info  = s:dir_vim . '/viminfo'
let s:file_local = s:dir_vim . '/vimrc.local'
let s:file_plug  = s:dir_autoload . '/plug.vim'

" functions
function! s:mkdir(dir) abort
	if !isdirectory(a:dir)
		call mkdir(a:dir, 'p', 0700)
	endif
endfunction

function! s:set_list_prepend(name, ...) abort
	if !exists('&' . a:name)
		throw 'unknown option: ' . a:name
	endif
	let l:list = eval('&' . a:name)
	let l:list = split(l:list, '\\\@<!,')	" split with unescaped comma

	for l:i in range(a:0)
		let l:value = a:000[l:i]
		let l:value = escape(l:value, ',')
		call filter(l:list, 'v:val !=# l:value')
		call insert(l:list, l:value, l:i)
	endfor

	let l:list = join(l:list, ',')
	execute 'let &' . a:name . ' = l:list'
endfunction

" mkdir
call s:mkdir(s:dir_autoload)
call s:mkdir(s:dir_plug)
call s:mkdir(s:dir_backup)
call s:mkdir(s:dir_swap)
call s:mkdir(s:dir_undo)

" runtimepath
call s:set_list_prepend('runtimepath', s:dir_vim)

" ----- preferences -----------------------------

" viminfo
if has('viminfo')
	let &viminfo = "'100,<50,s10,h,n" . s:file_info
endif

" backup
call s:set_list_prepend('backupdir', s:dir_backup)
set backup writebackup

" swap
call s:set_list_prepend('directory', s:dir_swap)
set swapfile

" undo
if has('persistent_undo')
	call s:set_list_prepend('undodir', s:dir_undo)
	set undofile
endif

" gui
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=i
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

" directx
if has('directx')
	set renderoptions=type:directx,renmode:5
endif

" font
if has('gui_win32')
	set guifont-=MS_Gothic:h10 guifont^=MS_Gothic:h10
	set guifont-=Consolas:h10 guifont^=Consolas:h10
	set guifontwide-=MS_Gothic guifontwide^=MS_Gothic
	set guifontwide-=BIZ_UDゴシック guifontwide^=BIZ_UDゴシック
endif

" encoding & newline
set fileencodings-=cp932 fileencodings-=utf-8 fileencodings-=ucs-bom
set fileencodings^=cp932 fileencodings^=utf-8 fileencodings^=ucs-bom
set fileformats-=unix fileformats^=unix

" indent
set noexpandtab
set tabstop=4
set shiftwidth=4
let g:vim_indent_cont = 4

" search highlight
set hlsearch
set incsearch

" wildmenu
set wildmenu
set wildchar=<Tab>

" termguicolors
if has('termguicolors')
	set termguicolors
	if $TERM ==# 'tmux-256color' || $TERM ==# 'screen-256color'
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif
endif

" cursor
let &t_SI .= "\e[6 q"
let &t_SR .= "\e[4 q"
let &t_EI .= "\e[2 q"

" IM
autocmd vimrc InsertLeave * set iminsert=0 imsearch=0

" fullscreen
function! s:cmd_fullscreen() abort
	let l:current_winnr = winnr()
	let l:use_only = v:true
	for l:winnr in range(1, winnr('$'))
		let l:bufinfo = getbufinfo(winbufnr(l:winnr))[0]
		if l:winnr != l:current_winnr && (l:bufinfo.name !=# '' || l:bufinfo.changed)
			let l:use_only = v:false
			break
		endif
	endfor

	if l:use_only
		only
		return
	endif
	execute "normal! \<C-w>T"
endfunction
command! Fullscreen call s:cmd_fullscreen()

" timeout
set notimeout
set ttimeout

" mapping
let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <Leader>z <C-w>z
nnoremap <silent> <Leader>f :<C-u>Fullscreen<CR>

" misc
filetype plugin indent on
syntax enable
set autoread
set background=dark
set backspace=indent,eol,start
set cursorline
set display+=lastline
set hidden
set laststatus=1
set lazyredraw
set nowrap
set number
set pumheight=10
set ruler
set scrolloff=5
set showcmd

" ----- plugins ---------------------------------
if isdirectory(s:dir_autoload) && !filereadable(s:file_plug) && executable('git')
	function! s:install_plug()
		let l:tmp = tempname()
		let l:out = ''
		try
			let l:out = system('git clone --depth 1 https://github.com/junegunn/vim-plug.git "' . l:tmp . '"')
			if v:shell_error
				echohl ErrorMsg
				echomsg 'Error installing vim-plug' . l:out
				echohl None
				return 1
			endif
			call rename(l:tmp . '/plug.vim', s:file_plug)
		finally
			call delete(l:tmp, 'rf')
		endtry
	endfunction
	call s:install_plug()
endif

if isdirectory(s:dir_plug) && filereadable(s:file_plug) && executable('git')
	call plug#begin(s:dir_plug)

	" vaffle.vim
	Plug 'cocopon/vaffle.vim'
	let g:vaffle_force_delete = 1
	let g:vaffle_show_hidden_files = 1

	" vim-quickrun
	Plug 'thinca/vim-quickrun'
	if has('job') && exists('*ch_close_in')
		let g:quickrun_config = get(g:, 'quickrun_config', {})
		let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
		let g:quickrun_config['_']['runner'] = 'job'
	endif

	" vim-fugitive
	Plug 'tpope/vim-fugitive'

	" sudo.vim
	if has('unix') && executable('sudo')
		Plug 'vim-scripts/sudo.vim'
	endif

	" vim-trailing-whitespace
	Plug 'bronson/vim-trailing-whitespace'

	" DetectIndent
	Plug 'ciaranm/detectindent'
	function! s:detectindent_bufread() abort
		if exists(':DetectIndent') != 2
			return
		endif
		DetectIndent
	endfunction
	autocmd vimrc BufRead * call s:detectindent_bufread()

	" vim-lsp
	if has('job') && has('timers') && has('lambda')
		Plug 'prabirshrestha/vim-lsp'
		Plug 'prabirshrestha/async.vim'

		let g:lsp_diagnostics_echo_cursor = 1
		let g:lsp_signs_enabled = 1
		let g:lsp_signs_error = {'text': 'X'}
		let g:lsp_signs_warning = {'text': '!'}
		let g:lsp_signs_hint = {'text': '?'}

		function! s:lsp_format_sync_if_possible() abort
			if exists(':LspDocumentFormatSync') != 2
				return
			endif
			silent LspDocumentFormatSync
		endfunction

		function! s:lsp_setup() abort
			setlocal omnifunc=lsp#complete
			nmap <buffer> gd <Plug>(lsp-definition)

			" FIXME: reloading vimrc will remove this autocmd
			autocmd vimrc BufWrite <buffer> call s:lsp_format_sync_if_possible()
		endfunction

		if executable('pyls')
			autocmd vimrc User lsp_setup call lsp#register_server({
				\ 'name': 'pyls',
				\ 'cmd': ['pyls'],
				\ 'whitelist': ['python'],
				\ })
			autocmd vimrc FileType python call s:lsp_setup()
		endif
	endif

	" iceberg.vim
	if !has('win32') || has('gui_running')
		Plug 'cocopon/iceberg.vim', {'do': ':colorscheme iceberg'}

		" iceberg.vim will check &t_Co, but &t_Co has not been initialized yet.
		set t_Co=256	" workaround

		function! s:load_colorscheme_if_possible(name) abort
			try
				execute 'colorscheme ' . a:name
			catch /^Vim\%((\a\+)\)\=:E185/
			endtry
		endfunction
		autocmd vimrc User plug_end call s:load_colorscheme_if_possible('iceberg')
	endif

	" vimdoc-ja
	Plug 'vim-jp/vimdoc-ja'
	set helplang=ja

	call plug#end()
	doautocmd vimrc User plug_end
endif

" ----- local -----------------------------------
if filereadable(s:file_local)
	execute 'source ' . fnameescape(s:file_local)
endif
