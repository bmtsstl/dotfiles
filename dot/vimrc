" ----- initialize ------------------------------

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:dir_vim      = expand('<sfile>:p:h')
let s:dir_autoload = s:dir_vim . '/autoload'
let s:dir_backup   = s:dir_vim . '/backup'
let s:dir_cache    = s:dir_vim . '/cache'
let s:dir_plug     = s:dir_vim . '/plug'
let s:dir_swap     = s:dir_vim . '/swap'
let s:dir_undo     = s:dir_vim . '/undo'
let s:dir_ctrlp    = s:dir_cache . '/ctrlp'

let s:file_info  = s:dir_vim . '/viminfo'
let s:file_local = s:dir_vim . '/vimrc.local'
let s:file_plug  = s:dir_autoload . '/plug.vim'

" functions
function! s:mkdir(dir) abort
	if !isdirectory(a:dir)
		call mkdir(a:dir, 'p', 0700)
	endif
endfunction

function! s:set_list_prepend(name, ...) abort
	if !exists('&' . a:name)
		throw 'unknown option: ' . a:name
	endif
	let l:list = eval('&' . a:name)
	let l:list = split(l:list, '\\\@<!,')	" split with unescaped comma

	for l:i in range(a:0 - 1, 0, -1)
		let l:value = a:000[l:i]
		let l:value = escape(l:value, ',')
		call filter(l:list, 'v:val !=# l:value')
		call insert(l:list, l:value)
	endfor

	let l:list = join(l:list, ',')
	execute 'let &' . a:name . ' = l:list'
endfunction

function s:SID()
	return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
endfun

function! s:execute_if_available(command) abort
	try
		execute a:command
	catch /^Vim\%((\a\+)\)\=:E464:/
	catch /^Vim\%((\a\+)\)\=:E492:/
	endtry
endfunction

" runtimepath
call s:set_list_prepend('runtimepath', s:dir_vim)

" ----- options ---------------------------------

" viminfo
if has('viminfo')
	call s:mkdir(fnamemodify(s:file_info, ':p:h'))
	let &viminfo = "'100,<50,s10,h,n" . s:file_info
endif

" backup
call s:mkdir(s:dir_backup)
call s:set_list_prepend('backupdir', s:dir_backup)
set backup writebackup

" swap
call s:mkdir(s:dir_swap)
call s:set_list_prepend('directory', s:dir_swap)
set swapfile

" undo
if has('persistent_undo')
	call s:mkdir(s:dir_undo)
	call s:set_list_prepend('undodir', s:dir_undo)
	set undofile
endif

" gui
set guioptions+=!
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=i
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

" directx
if has('directx')
	set renderoptions=type:directx,renmode:5
endif

" font
if has('gui_win32')
	set guifont-=MS_Gothic:h11 guifont^=MS_Gothic:h11
	set guifont-=Consolas:h11 guifont^=Consolas:h11
	set guifontwide-=MS_Gothic guifontwide^=MS_Gothic
	set guifontwide-=BIZ_UDゴシック guifontwide^=BIZ_UDゴシック
endif

" gui size
if has('gui')
	set lines=36
	set columns=120
endif

" encoding & newline
set fileencodings-=cp932 fileencodings-=utf-8 fileencodings-=ucs-bom
set fileencodings^=cp932 fileencodings^=utf-8 fileencodings^=ucs-bom
set fileformats-=unix fileformats^=unix

" indent
set noexpandtab
set tabstop=4
set shiftwidth=4
let g:vim_indent_cont = 4

" search highlight
set hlsearch
set incsearch

" termguicolors
if has('termguicolors')
	set termguicolors
	if $TERM ==# 'tmux-256color' || $TERM ==# 'screen-256color'
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif
endif

" cursor
if &term !=# 'win32'
	let &t_SI .= "\e[5 q"
	let &t_SR .= "\e[3 q"
	let &t_EI .= "\e[1 q"
endif
set guicursor=a:block-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=i-ci:ver10-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=r-cr:hor5-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor

" IM
autocmd vimrc InsertLeave * set iminsert=0 imsearch=0

" timeout
set notimeout
set ttimeout

" misc
filetype plugin indent on
syntax enable
set autoread
set background=dark
set backspace=indent,eol,start
set cursorline
set display+=lastline
set hidden
set laststatus=2
set lazyredraw
set nomodeline
set nowrap
set number
set pumheight=10
set ruler
set scrolloff=5
set showcmd
set updatetime=300
set wildmenu

" ----- commands --------------------------------

" maximize
function! s:cmd_maximize() abort
	let l:current_winnr = winnr()
	let l:use_only = v:true
	for l:winnr in range(1, winnr('$'))
		let l:bufnr = winbufnr(l:winnr)
		if l:winnr != l:current_winnr && (bufname(l:bufnr) !=# '' || getbufvar(l:bufnr, '&modified'))
			let l:use_only = v:false
			break
		endif
	endfor

	if l:use_only
		only
		return
	endif
	execute "normal! \<C-w>T"
endfunction
command! Maximize call s:cmd_maximize()

" ----- mappings --------------------------------

let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <silent> <Leader>m :<C-u>Maximize<CR>
nnoremap <silent> <Leader>t :<C-u>tab split<CR>

onoremap <silent> { :<C-u>normal! $v{<CR>
onoremap <silent> } :<C-u>normal! 0v}k$<CR>

" ----- fileytpe specific settings --------------

" python
autocmd vimrc FileType python set colorcolumn=79

" ----- plugins ---------------------------------
if !filereadable(s:file_plug) && executable('git')
	call s:mkdir(fnamemodify(s:file_plug, ':p:h'))
	function! s:download_plug()
		let l:tmp = tempname()
		let l:out = ''
		try
			call system('git clone --depth 1 https://github.com/junegunn/vim-plug.git "' . l:tmp . '"')
			call rename(l:tmp . '/plug.vim', s:file_plug)
		finally
			call delete(l:tmp, 'rf')
		endtry
	endfunction
	call s:download_plug()
endif

if filereadable(s:file_plug) && executable('git')
	call s:mkdir(s:dir_plug)
	call plug#begin(s:dir_plug)

	" vaffle.vim
	Plug 'cocopon/vaffle.vim'
	let g:vaffle_force_delete = 1
	let g:vaffle_show_hidden_files = 1

	" ctrlp.vim
	Plug 'ctrlpvim/ctrlp.vim'
	call s:mkdir(s:dir_ctrlp)
	let g:ctrlp_map = '<Leader>p'
	let g:ctrlp_cmd = 'CtrlPMRU'
	let g:ctrlp_working_path_mode = 'a'
	let g:ctrlp_cache_dir = s:dir_ctrlp
	let g:ctrlp_show_hidden = 1
	let g:ctrlp_follow_symlinks = 1

	" vim-quickrun
	Plug 'thinca/vim-quickrun'
	if has('terminal')
		function! s:quickrun_terminal_open()
			let l:term_list = term_list()
			for l:winnr in range(1, winnr('$'))
				let l:bufnr = winbufnr(l:winnr)
				if index(l:term_list, l:bufnr) != -1 && bufname(l:bufnr) =~# '^quickrun: '
					call win_gotoid(win_getid(l:winnr))
					return
				endif
			endfor

			if winwidth(0) * 2 < winheight(0) * 5
				new
			else
				vnew
			endif
		endfunction

		let g:quickrun_config = get(g:, 'quickrun_config', {})
		let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
		let g:quickrun_config['_']['runner'] = 'terminal'
		let g:quickrun_config['_']['runner/terminal/opener'] = 'call <SNR>' . s:SID() . '_quickrun_terminal_open()'
	elseif has('job') && exists('*ch_close_in')
		let g:quickrun_config = get(g:, 'quickrun_config', {})
		let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
		let g:quickrun_config['_']['runner'] = 'job'
	endif

	" sudo.vim
	if has('unix') && executable('sudo')
		Plug 'vim-scripts/sudo.vim'
	endif

	" vim-better-whitespace
	Plug 'ntpeters/vim-better-whitespace'
	let g:better_whitespace_operator = ''
	let g:better_whitespace_ctermcolor = 'darkred'
	let g:better_whitespace_guicolor = 'darkred'
	if exists('##TerminalOpen')
		autocmd vimrc TerminalOpen * call s:execute_if_available('DisableWhitespace')
	endif

	" DetectIndent
	Plug 'ciaranm/detectindent'
	autocmd vimrc BufRead * call s:execute_if_available('DetectIndent')

	" vim-go
	if executable('go')
		Plug 'fatih/vim-go'
		let g:go_fmt_autosave = 1
		let g:go_fmt_command = 'goimports'
	endif

	" vim-toml
	Plug 'cespare/vim-toml'

	" coc.nvim
	if v:version >= 801 && executable('node')
		Plug 'neoclide/coc.nvim', {'branch': 'release'}
		let g:coc_user_config = {
			\ 'suggest.autoTrigger': 'none',
			\ 'diagnostic.refreshOnInsertMode': v:true,
			\ 'diagnostic.errorSign': 'E>',
			\ 'diagnostic.warningSign': 'W>',
			\ 'diagnostic.infoSign': 'I>',
			\ 'diagnostic.hintSign': 'H>',
			\ 'signature.enable': v:false,
			\ 'languageserver': {},
			\ }

		function! s:coc_setup_buffer()
			inoremap <buffer><silent><expr> <C-x><C-o> coc#refresh()
			map <buffer><silent> gd <Plug>(coc-definition)
			autocmd vimrc BufWrite <buffer> call CocAction('format')
		endfunction

		if executable('pyls')
			let g:coc_user_config['languageserver']['pyls'] = {
				\ 'command': 'pyls',
				\ 'filetypes': ['python'],
				\ 'settings': {'pyls': {'plugins': {'pylint': {'enabled': v:false}}}},
				\ }
			autocmd vimrc FileType python call s:coc_setup_buffer()
		endif
	endif

	" iceberg.vim
	if !has('win32') || has('gui_running')
		Plug 'cocopon/iceberg.vim', {'do': ':colorscheme iceberg'}

		function! s:load_colorscheme_if_available(name) abort
			try
				execute 'colorscheme ' . a:name
			catch /^Vim\%((\a\+)\)\=:E185:/
			endtry
		endfunction
		autocmd vimrc User plug_end call s:load_colorscheme_if_available('iceberg')
	endif

	" vimdoc-ja
	Plug 'vim-jp/vimdoc-ja'
	set helplang=ja

	call plug#end()
	autocmd vimrc User plug_end silent " at least one autocommand should be registered
	doautocmd vimrc User plug_end
endif

" ----- local -----------------------------------
if filereadable(s:file_local)
	source `=s:file_local`
endif
