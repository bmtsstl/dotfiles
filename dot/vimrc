" ----- initialize ------------------------------

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:dir_vim = expand('<sfile>:p:h')

let s:dir_autoload = s:dir_vim . '/autoload'
let s:dir_backup   = s:dir_vim . '/backup'
let s:dir_cache    = s:dir_vim . '/cache'
let s:dir_plug     = s:dir_vim . '/plug'
let s:dir_swap     = s:dir_vim . '/swap'
let s:dir_undo     = s:dir_vim . '/undo'
let s:file_info    = s:dir_vim . '/viminfo'
let s:file_local   = s:dir_vim . '/vimrc.local'

let s:dir_ctrlp = s:dir_cache . '/ctrlp'
let s:file_plug = s:dir_autoload . '/plug.vim'

" function
function! s:set_list_prepend(name, ...) abort
	if !exists('&' . a:name)
		throw 'unknown option: ' . a:name
	endif
	let l:list = eval('&' . a:name)
	let l:list = split(l:list, '\\\@<!,')	" split with unescaped comma

	for l:i in range(a:0 - 1, 0, -1)
		let l:value = a:000[l:i]
		let l:value = escape(l:value, ',')
		call filter(l:list, 'v:val !=# l:value')
		call insert(l:list, l:value)
	endfor

	let l:list = join(l:list, ',')
	execute 'let &' . a:name . ' = l:list'
endfunction

function! s:SID() abort
	return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
endfun

function! s:execute_if_available(command) abort
	try
		execute a:command
	catch /^Vim\%((\a\+)\)\=:E464:/
	catch /^Vim\%((\a\+)\)\=:E492:/
	endtry
endfunction

" runtimepath
call s:set_list_prepend('runtimepath', s:dir_vim)

" ----- options ---------------------------------

" viminfo
if has('viminfo')
	call mkdir(fnamemodify(s:file_info, ':p:h'), 'p', 0700)
	let &viminfo = "'100,<50,s10,h,n" . s:file_info
endif

" backup
call mkdir(s:dir_backup, 'p', 0700)
if has('patch-8.1.0251')
	call s:set_list_prepend('backupdir', s:dir_backup . '//')
else
	call s:set_list_prepend('backupdir', s:dir_backup)
endif
set backup writebackup

" swap
call mkdir(s:dir_swap, 'p', 0700)
call s:set_list_prepend('directory', s:dir_swap . '//')
set swapfile

" undo
if has('persistent_undo')
	call mkdir(s:dir_undo, 'p', 0700)
	call s:set_list_prepend('undodir', s:dir_undo)
	set undofile
endif

" gui
set guioptions+=!
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

" font
if has('gui_win32')
	set guifont-=MS_Gothic:h11 guifont^=MS_Gothic:h11
	set guifont-=Consolas:h11 guifont^=Consolas:h11
	set guifontwide-=MS_Gothic guifontwide^=MS_Gothic
	set guifontwide-=BIZ_UDゴシック guifontwide^=BIZ_UDゴシック
endif

" encoding & newline
set fileencodings-=cp932 fileencodings-=utf-8 fileencodings-=ucs-bom
set fileencodings^=cp932 fileencodings^=utf-8 fileencodings^=ucs-bom
set fileformats-=unix fileformats^=unix

" indent
set expandtab
set tabstop=4
set shiftwidth=4

" wrap
set nowrap
set breakindent

" search highlight
set hlsearch
set incsearch

" scroll
set scrolloff=5
set sidescroll=1
set sidescrolloff=5

" termguicolors
if has('termguicolors')
	if $TERM ==# 'tmux-256color' || $TERM ==# 'screen-256color'
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif
	let &termguicolors = (&t_8f !=# '' && &t_8b !=# '') || has('vcon')
endif

" cursor
if &term !=# 'win32'
	let &t_SI .= "\e[5 q"
	let &t_SR .= "\e[3 q"
	let &t_EI .= "\e[1 q"
endif
set guicursor=a:block-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=i-ci:ver10-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=r-cr:hor5-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor

" IM
autocmd vimrc InsertLeave * set iminsert=0 imsearch=0
autocmd vimrc CmdlineLeave * set iminsert=0 imsearch=0

" timeout
set notimeout
set ttimeout

" hardcopy
set printoptions=left:5pc,right:5pc,top:5pc,bottom:5pc
set printoptions+=header:2,syntax:n,number:y,wrap:y,duplex:off,collate:y
set printoptions+=jobsplit:n,portrait:y,paper:A4,formfeed:n
if has('win32')
	set printfont=Consolas:h11
endif

" misc
filetype plugin indent on
syntax enable
set autochdir
set autoread
set background=dark
set backspace=indent,eol,start
set completeopt-=preview
set cursorline
set display+=lastline
set hidden
set laststatus=2
set lazyredraw
set nomodeline
set number
set pumheight=10
set renderoptions=type:directx,renmode:5
set ruler
set wildmenu

" ----- commands --------------------------------

" maximize
function! s:cmd_maximize() abort
	let l:current_winnr = winnr()
	let l:use_only = v:true
	for l:winnr in range(1, winnr('$'))
		let l:bufnr = winbufnr(l:winnr)
		if l:winnr != l:current_winnr && (bufname(l:bufnr) !=# '' || getbufvar(l:bufnr, '&modified'))
			let l:use_only = v:false
			break
		endif
	endfor

	if l:use_only
		only
		return
	endif
	execute "normal! \<C-w>T"
endfunction
command! Maximize call s:cmd_maximize()

" ----- mappings --------------------------------

let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <silent> <Leader>m :<C-u>Maximize<CR>
nnoremap <silent> <Leader>t :<C-u>tab split<CR>

" ----- fileytpe specific settings --------------

" vim
let g:vim_indent_cont = 4

" ----- plugins ---------------------------------
if !filereadable(s:file_plug) && executable('git') && executable('curl')
	call mkdir(fnamemodify(s:file_plug, ':p:h'), 'p', 0700)
	call system('curl -fLo "' . s:file_plug . '" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
endif

if filereadable(s:file_plug) && executable('git')
	call mkdir(s:dir_plug, 'p', 0700)
	call plug#begin(s:dir_plug)

	" vaffle.vim
	Plug 'cocopon/vaffle.vim'
	let g:vaffle_force_delete = 1
	let g:vaffle_show_hidden_files = 1

	" ctrlp.vim
	Plug 'ctrlpvim/ctrlp.vim'
	call mkdir(s:dir_ctrlp, 'p', 0700)
	let g:ctrlp_map = '<Leader>p'
	let g:ctrlp_cmd = 'CtrlPMRU'
	let g:ctrlp_working_path_mode = 'a'
	let g:ctrlp_cache_dir = s:dir_ctrlp
	let g:ctrlp_show_hidden = 1
	let g:ctrlp_follow_symlinks = 1

	" vim-quickrun
	Plug 'thinca/vim-quickrun'
	if has('terminal')
		function! s:quickrun_terminal_open() abort
			let l:term_list = term_list()
			for l:winnr in range(1, winnr('$'))
				let l:bufnr = winbufnr(l:winnr)
				if index(l:term_list, l:bufnr) != -1 && bufname(l:bufnr) =~# '^quickrun: '
					call win_gotoid(win_getid(l:winnr))
					return
				endif
			endfor

			if winwidth(0) * 2 < winheight(0) * 5
				new
			else
				vnew
			endif
		endfunction

		let g:quickrun_config = get(g:, 'quickrun_config', {})
		let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
		let g:quickrun_config['_']['runner'] = 'terminal'
		let g:quickrun_config['_']['runner/terminal/opener'] = 'call <SNR>' . s:SID() . '_quickrun_terminal_open()'
	endif

	" sudo.vim
	if has('unix') && executable('sudo')
		Plug 'vim-scripts/sudo.vim'
	endif

	" vim-better-whitespace
	Plug 'ntpeters/vim-better-whitespace'
	let g:better_whitespace_operator = ''
	if exists('##TerminalOpen')
		autocmd vimrc TerminalOpen * call s:execute_if_available('DisableWhitespace')
	endif

	" DetectIndent
	Plug 'ciaranm/detectindent'
	autocmd vimrc BufRead * call s:execute_if_available('DetectIndent')

	" vim-toml
	Plug 'cespare/vim-toml'

	" vim-lsp
	if exists('*json_encode') && has('job') && has('timers') && has('lambda')
		Plug 'prabirshrestha/vim-lsp'
		let g:lsp_preview_doubletap = 0
		let g:lsp_diagnostics_float_cursor = has('popupwin')
		let g:lsp_document_highlight_enabled = 0
		let g:lsp_signature_help_enabled = 0

		function! s:lsp_setup_buffer() abort
			setlocal omnifunc=lsp#complete
			nmap <buffer> gd <Plug>(lsp-definition)
			nmap <buffer> <Leader>f <Plug>(lsp-document-format)
		endfunction

		if executable('pyls')
			autocmd vimrc User lsp_setup call lsp#register_server({
				\	'name': 'pyls',
				\	'cmd': ['pyls'],
				\	'whitelist': ['python'],
				\	'workspace_config': {
				\		'pyls': {
				\			'plugins': {
				\				'autopep8': {'enabled': v:false},
				\				'jedi_completion': {'enabled': v:true},
				\				'jedi_definition': {'enabled': v:true},
				\				'jedi_hover': {'enabled': v:true},
				\				'jedi_references': {'enabled': v:true},
				\				'jedi_signature_help': {'enabled': v:true},
				\				'jedi_symbols': {'enabled': v:true},
				\				'mccabe': {'enabled': v:true},
				\				'pycodestyle': {'enabled': v:false},
				\				'pydocstyle': {'enabled': v:false},
				\				'pyflakes': {'enabled': v:true},
				\				'pylint': {'enabled': v:false},
				\				'rope_completion': {'enabled': v:true},
				\				'rope_rename': {'enabled': v:true},
				\				'yapf': {'enabled': v:true},
				\			}
				\		}
				\	},
				\ })
			autocmd vimrc FileType python call s:lsp_setup_buffer()
		endif

		if executable('gopls')
			autocmd vimrc User lsp_setup call lsp#register_server({
				\	'name': 'gopls',
				\	'cmd': ['gopls'],
				\	'whitelist': ['go'],
				\ })
			autocmd vimrc FileType go call s:lsp_setup_buffer()
		endif
	endif

	" colorscheme
	if has('gui_running') || &termguicolors || &t_Co >= 256
		Plug 'cocopon/iceberg.vim'
		Plug 'cormacrelf/vim-colors-github'

		function! s:load_colorscheme_if_available(name) abort
			try
				execute 'colorscheme ' . a:name
			catch /^Vim\%((\a\+)\)\=:E185:/
			endtry
		endfunction
		autocmd vimrc User vimrc_plug_end ++nested call s:load_colorscheme_if_available('iceberg')
	endif

	" vimdoc-ja
	Plug 'vim-jp/vimdoc-ja'
	set helplang^=ja

	call plug#end()
	autocmd vimrc User vimrc_plug_end silent " at least one autocommand should be registered
	doautocmd vimrc User vimrc_plug_end
endif

" ----- local -----------------------------------
if filereadable(s:file_local)
	source `=s:file_local`
endif
