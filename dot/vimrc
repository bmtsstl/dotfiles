" ----- initialize ------------------------------

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
    autocmd!
augroup END

" files & directories
let s:dir_vim = expand('<sfile>:p:h')

let s:dir_autoload = s:dir_vim . '/autoload'
let s:dir_backup   = s:dir_vim . '/backup'
let s:dir_cache    = s:dir_vim . '/cache'
let s:dir_plug     = s:dir_vim . '/plug'
let s:dir_swap     = s:dir_vim . '/swap'
let s:dir_undo     = s:dir_vim . '/undo'
let s:file_info    = s:dir_vim . '/viminfo'
let s:file_local   = s:dir_vim . '/vimrc.local'

let s:dir_ctrlp = s:dir_cache . '/ctrlp'
let s:file_plug = s:dir_autoload . '/plug.vim'

" function
function! s:set_list_prepend(name, ...) abort
    if !exists('&' . a:name)
        throw 'unknown option: ' . a:name
    endif
    let l:list = eval('&' . a:name)
    let l:list = split(l:list, '\\\@<!,')    " split with unescaped comma

    for l:i in range(a:0 - 1, 0, -1)
        let l:value = a:000[l:i]
        let l:value = escape(l:value, ',')
        call filter(l:list, 'v:val !=# l:value')
        call insert(l:list, l:value)
    endfor

    let l:list = join(l:list, ',')
    execute 'let &' . a:name . ' = l:list'
endfunction

function! s:SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
endfun

function! s:execute_if_available(command) abort
    try
        execute a:command
    catch /^Vim\%((\a\+)\)\=:E464:/
    catch /^Vim\%((\a\+)\)\=:E492:/
    endtry
endfunction

" runtimepath
call s:set_list_prepend('runtimepath', s:dir_vim)

" ----- options ---------------------------------

" viminfo
if has('viminfo')
    call mkdir(fnamemodify(s:file_info, ':p:h'), 'p', 0700)
    let &viminfo = "'100,<50,s10,h,n" . s:file_info
endif

" backup
call mkdir(s:dir_backup, 'p', 0700)
call s:set_list_prepend('backupdir', s:dir_backup . '//')
set backup writebackup

" swap
call mkdir(s:dir_swap, 'p', 0700)
call s:set_list_prepend('directory', s:dir_swap . '//')
set swapfile

" undo
if has('persistent_undo')
    call mkdir(s:dir_undo, 'p', 0700)
    call s:set_list_prepend('undodir', s:dir_undo)
    set undofile
endif

" gui
set guioptions+=!
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

" font
if has('gui_win32')
    set guifont-=MS_Gothic:h11 guifont^=MS_Gothic:h11
    set guifont-=Consolas:h11 guifont^=Consolas:h11
    set guifontwide-=MS_Gothic guifontwide^=MS_Gothic
    set guifontwide-=BIZ_UDゴシック guifontwide^=BIZ_UDゴシック
endif

" encoding & newline
set fileencodings-=cp932 fileencodings-=utf-8 fileencodings-=ucs-bom
set fileencodings^=cp932 fileencodings^=utf-8 fileencodings^=ucs-bom
set fileformats-=unix fileformats^=unix

" indent
set expandtab
set tabstop=4
set shiftwidth=4

" wrap
set nowrap
set breakindent

" search highlight
set hlsearch
set incsearch

" scroll
set scrolloff=5
set sidescroll=1
set sidescrolloff=5

" termguicolors
if has('termguicolors')
    if $TERM ==# 'tmux-256color' || $TERM ==# 'screen-256color' || $TERM ==# 'alacritty'
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
    let &termguicolors = (&t_8f !=# '' && &t_8b !=# '') || has('vcon')
endif

" cursor
if &term !=# 'win32'
    let &t_SI .= "\e[5 q"
    let &t_SR .= "\e[3 q"
    let &t_EI .= "\e[1 q"
endif
set guicursor=a:block-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=i-ci:ver10-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor
set guicursor+=r-cr:hor5-blinkwait1000-blinkon500-blinkoff500-Cursor/lCursor

" IM
autocmd vimrc InsertLeave * set iminsert=0 imsearch=0
autocmd vimrc CmdlineLeave * set iminsert=0 imsearch=0

" timeout
set notimeout
set ttimeout

" hardcopy
set printoptions=left:5pc,right:5pc,top:5pc,bottom:5pc
set printoptions+=header:2,syntax:n,number:y,wrap:y,duplex:off,collate:y
set printoptions+=jobsplit:n,portrait:y,paper:A4,formfeed:n
if has('win32')
    set printfont=Consolas:h11
endif

" misc
filetype plugin indent on
syntax enable
set autoread
set background=dark
set backspace=indent,eol,start
set completeopt-=preview
set cursorline
set display+=lastline
set hidden
set laststatus=2
set nolazyredraw
set nomodeline
set number
set pumheight=10
set renderoptions=type:directx,renmode:5
set ruler
set updatetime=1000
set wildmenu

" ----- commands --------------------------------

" maximize
function! s:cmd_maximize() abort
    let l:current_winnr = winnr()
    let l:use_only = v:true
    for l:winnr in range(1, winnr('$'))
        let l:bufnr = winbufnr(l:winnr)
        if l:winnr != l:current_winnr && (bufname(l:bufnr) !=# '' || getbufvar(l:bufnr, '&modified'))
            let l:use_only = v:false
            break
        endif
    endfor

    if l:use_only
        only
        return
    endif
    execute "normal! \<C-w>T"
endfunction
command! Maximize call s:cmd_maximize()

" ----- mappings --------------------------------

let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <silent> <Leader>m :<C-u>Maximize<CR>
nnoremap <silent> <Leader>t :<C-u>tab split<CR>
nnoremap <silent> <Leader>c :<C-u>cd %:h<CR>

" ----- fileytpe specific settings --------------

" vim
let g:vim_indent_cont = 4

" man
runtime ftplugin/man.vim

" ----- highlight extra whitespace --------------

" vim-better-whitespace plugin redefines match highlights every time CursorMovedI fires,
" causing a noticeable delay between pressing a key and seeing the character appear on
" the screen. Other plugins are either unpopular or highlight trailing whitespace in
" insert mode, which can be disruptive.

function! s:extra_whitespace_setup() abort
    if !exists('w:vimrc_extra_whitespace_match_id')
        let w:vimrc_extra_whitespace_match_id = -1
    endif
endfunction

function! s:extra_whitespace_show() abort
    call s:extra_whitespace_setup()
    if w:vimrc_extra_whitespace_match_id ==# -1
        let w:vimrc_extra_whitespace_match_id = matchadd('Error', '[ \t]\+$', -10 )
    endif
endfunction

function! s:extra_whitespace_hide() abort
    call s:extra_whitespace_setup()
    if w:vimrc_extra_whitespace_match_id !=# -1
        call matchdelete(w:vimrc_extra_whitespace_match_id)
        let w:vimrc_extra_whitespace_match_id = -1
    endif
endfunction

function! s:extra_whitespace_update() abort
    if &l:modifiable && mode() !=# 'i'
        call s:extra_whitespace_show()
    else
        call s:extra_whitespace_hide()
    endif
endfunction

autocmd vimrc WinNew            *           call s:extra_whitespace_update()
autocmd vimrc BufWinEnter       *           call s:extra_whitespace_update()
autocmd vimrc TerminalWinOpen   *           call s:extra_whitespace_update()
autocmd vimrc OptionSet         modifiable  call s:extra_whitespace_update()
autocmd vimrc ModeChanged       *:i*,i*:*   call s:extra_whitespace_update()

" ----- plugins ---------------------------------
if !filereadable(s:file_plug) && executable('git') && executable('curl')
    call mkdir(fnamemodify(s:file_plug, ':p:h'), 'p', 0700)
    call system('curl -fLo "' . s:file_plug . '" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
endif

if filereadable(s:file_plug) && executable('git')
    call mkdir(s:dir_plug, 'p', 0700)
    call plug#begin(s:dir_plug)

    " vaffle.vim
    Plug 'cocopon/vaffle.vim'
    let g:vaffle_force_delete = 1
    let g:vaffle_show_hidden_files = 1

    " ctrlp.vim
    Plug 'ctrlpvim/ctrlp.vim'
    call mkdir(s:dir_ctrlp, 'p', 0700)
    let g:ctrlp_map = '<Leader>p'
    let g:ctrlp_cmd = 'CtrlPMRU'
    let g:ctrlp_working_path_mode = 'a'
    let g:ctrlp_cache_dir = s:dir_ctrlp
    let g:ctrlp_show_hidden = 1
    let g:ctrlp_follow_symlinks = 1

    " vim-quickrun
    Plug 'thinca/vim-quickrun'
    if has('terminal')
        function! s:quickrun_terminal_open() abort
            let l:term_list = term_list()
            for l:winnr in range(1, winnr('$'))
                let l:bufnr = winbufnr(l:winnr)
                if index(l:term_list, l:bufnr) != -1 && bufname(l:bufnr) =~# '^quickrun: '
                    call win_gotoid(win_getid(l:winnr))
                    return
                endif
            endfor

            if winwidth(0) * 2 < winheight(0) * 5
                new
            else
                vnew
            endif
        endfunction

        let g:quickrun_config = get(g:, 'quickrun_config', {})
        let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
        let g:quickrun_config['_']['runner'] = 'terminal'
        let g:quickrun_config['_']['runner/terminal/opener'] = 'call <SNR>' . s:SID() . '_quickrun_terminal_open()'
    endif
    nnoremap <silent> <Leader>q :<C-u>QuickRun<CR>

    " sudo.vim
    if has('unix') && executable('sudo')
        Plug 'vim-scripts/sudo.vim'
    endif

    " sleuth.vim
    Plug 'tpope/vim-sleuth'

    " vim-quickhl
    Plug 't9md/vim-quickhl'
    function! s:quickhl() abort
        let l:char_list = split(getline('.'), '\zs')
        if len(l:char_list) <= 0
            QuickhlManualReset
            return
        endif
        let l:char = l:char_list[charcol('.') - 1]
        if l:char ==# ' ' || l:char ==# '\t'
            QuickhlManualReset
            return
        endif
        call quickhl#manual#this_whole_word('n')
    endfunction
    execute 'nnoremap <silent> <Leader>: :<C-u>call <SNR>' .. s:SID() .. '_quickhl()<CR>'

    " vim-signify
    Plug 'mhinz/vim-signify'
    let g:signify_priority = 0

    " lsp
    Plug 'yegappan/lsp'

    function! s:lsp_setup() abort
        call LspOptionsSet({
            \   'autoComplete': v:false,
            \   'showSignature': v:false,
            \ })

        let l:gopls = exepath('gopls')
        if !empty(l:gopls)
            call LspAddServer([
                \   {
                \       'name': 'gopls',
                \       'path': l:gopls,
                \       'args': ['serve'],
                \       'filetype': ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],
                \       'rootSearch': ['go.mod', '.git/'],
                \       'syncInit': v:true,
                \   }
                \ ])
        endif

        let l:ruff = exepath('ruff')
        if !empty(l:ruff)
            call LspAddServer([
                \   {
                \       'name': 'ruff',
                \       'path': l:ruff,
                \       'args': ['server'],
                \       'filetype': 'python',
                \       'rootSearch': ['ruff.toml', '.ruff.toml', 'pyproject.toml', '.git/'],
                \       'features': {'hover': v:false},
                \       'syncInit': v:true,
                \   }
                \ ])
        endif

        let l:pyright_langserver = exepath('pyright-langserver')
        if !empty(l:pyright_langserver)
            call LspAddServer([
                \   {
                \       'name': 'pyright',
                \       'path': l:pyright_langserver,
                \       'args': ['--stdio'],
                \       'filetype': 'python',
                \       'workspaceConfig': {
                \           'python': {
                \               'analysis': {
                \                   'autoImportCompletions': v:false,
                \               },
                \           },
                \       },
                \       'rootSearch': ['pyrightconfig.json', 'pyproject.toml', '.git/'],
                \       'syncInit': v:true,
                \   }
                \ ])
        endif
    endfunction
    autocmd User LspSetup call s:lsp_setup()

    function! s:lsp_attached() abort
        setlocal keywordprg=:LspHover
        nnoremap <buffer> gd <Cmd>execute v:count .. 'LspGotoDefinition'<CR>
        nnoremap <buffer><silent> <Leader>f :LspFormat<CR>

        augroup vimrc_lsp_buffer
            autocmd! * <buffer>
            autocmd CursorMoved <buffer> silent! LspDiag! current
        augroup END
    endfunction
    autocmd User LspAttached call s:lsp_attached()

    " vim-code-dark
    Plug 'tomasiser/vim-code-dark'

    function! s:set_colorscheme() abort
        try
            colorscheme codedark
        catch /^Vim\%((\a\+)\)\=:E185:/
        endtry
    endfunction
    autocmd vimrc User VimRCPlugEnd call s:set_colorscheme()

    " vimdoc-ja
    Plug 'vim-jp/vimdoc-ja'
    set helplang^=ja

    call plug#end()
endif

if exists('#User#VimRCPlugEnd')
    doautocmd vimrc User VimRCPlugEnd
endif

" ----- local -----------------------------------
if filereadable(s:file_local)
    source `=s:file_local`
endif
