" ----- initialize ------------------------------

" nocompatible
if &compatible
	set nocompatible
endif

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:dir_vim      = expand('<sfile>:p:h')
let s:dir_autoload = s:dir_vim.'/autoload'
let s:dir_cache    = s:dir_vim.'/cache'

let s:dir_plug   = s:dir_cache.'/plug'
let s:dir_backup = s:dir_cache.'/backup'
let s:dir_swap   = s:dir_cache.'/swap'
let s:dir_undo   = s:dir_cache.'/undo'

let s:file_local = s:dir_vim.'/vimrc.local'
let s:file_plug  = s:dir_autoload.'/plug.vim'
let s:file_info  = s:dir_cache.'/info'

" mkdir
function! s:mkdir(dir) abort
	if !isdirectory(a:dir)
		call mkdir(a:dir, 'p', 0700)
	endif
endfunction

call s:mkdir(s:dir_autoload)
call s:mkdir(s:dir_cache)
call s:mkdir(s:dir_plug)
call s:mkdir(s:dir_backup)
call s:mkdir(s:dir_swap)
call s:mkdir(s:dir_undo)

" runtimepath
execute 'set runtimepath-='.s:dir_vim.' runtimepath^='.s:dir_vim

" ----- preferences -----------------------------

" viminfo
if has('viminfo')
	execute 'set viminfo+=n'.escape(s:file_info, '\')
endif

" backup
execute 'set backupdir^='.s:dir_backup
set backup writebackup

" swap
execute 'set directory^='.s:dir_swap
set swapfile

" undo
if has('persistent_undo')
	execute 'set undodir^='.s:dir_undo
	set undofile
endif

" gui
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=i
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

if has('gui_win32')
   	set guifont=MS_Gothic:h10
endif

if has('directx')
   	set renderoptions=type:directx
endif

" file handling
filetype plugin indent on
set fencs-=ucs-bom fencs-=utf-8 fencs-=cp932 fencs^=cp932 fencs^=utf-8 fencs^=ucs-bom
set ffs-=unix ffs^=unix
set autoread
set hidden

" view
syntax enable
set number
set tabstop=4
set shiftwidth=4
let g:vim_indent_cont = 4
set scrolloff=5
set pumheight=10
set laststatus=1
set ruler
set cursorline
set hlsearch
set wildmenu
set wildchar=<Tab>
set background=dark
set lazyredraw

" IM
inoremap <silent><ESC> <ESC>:set iminsert=0 imsearch=0<CR>

" mapping
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ----- interfaces ------------------------------

" python
if exists('+pythonthreedll')
	set pythonthreedll=python37.dll
endif

" ----- plugins ---------------------------------
if isdirectory(s:dir_autoload) && !filereadable(s:file_plug) && executable('curl')
	silent execute '!curl -fLo '.s:file_plug.' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	redraw!
endif

if isdirectory(s:dir_plug) && filereadable(s:file_plug) && executable('git')
	call plug#begin(s:dir_plug)

	" vaffle.vim
	Plug 'cocopon/vaffle.vim'
	let g:vaffle_force_delete = 1
	let g:vaffle_show_hidden_files = 1

	" vim-quickrun
	Plug 'thinca/vim-quickrun'

	" sudo.vim
	if has('unix') && executable('sudo')
		Plug 'vim-scripts/sudo.vim'
	endif

	" vim-go
	if executable('go')
		Plug 'fatih/vim-go', { 'tag': '*', 'do': ':GoUpdateBinaries' }
		let g:go_fmt_autosave = 0
		let g:go_metalinter_autosave = 0
		autocmd vimrc bufwritepost *.go GoImports
	endif

	" rust.vim
	if executable('rustc')
		Plug 'rust-lang/rust.vim'
	endif

	" python-mode
	if executable('python') && (has('python3') || has('python'))
		Plug 'python-mode/python-mode', { 'branch': 'develop' }
		if has('python3')
			let g:pymode_python = 'python3'
		else
			let g:pymode_python = 'python'
		endif

		autocmd vimrc bufwritepost *.py PymodeLintAuto
		let g:pymode_lint_on_write = 0
		let g:pymode_rope = 0
	endif

	" vim-hybrid
	if !has('win32') || has('gui_running')
		Plug 'w0ng/vim-hybrid', {'do': ':colorscheme hybrid'}
		autocmd vimrc vimenter * colorscheme hybrid
	endif

	call plug#end()
endif

" --- local -------------------------------------
if filereadable(s:file_local)
	execute 'source '.s:file_local
endif
