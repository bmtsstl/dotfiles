" ----- initialize ------------------------------

" nocompatible
if &compatible
	set nocompatible
endif

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:slash = '/'
if has('win32') | let s:slash = '\' | endif
let s:dir_vim      = expand('<sfile>:p:h')
let s:dir_autoload = s:dir_vim.s:slash.'autoload'
let s:dir_cache    = s:dir_vim.s:slash.'cache'

let s:dir_plug   = s:dir_cache.s:slash.'plug'
let s:dir_backup = s:dir_cache.s:slash.'backup'
let s:dir_swap   = s:dir_cache.s:slash.'swap'
let s:dir_undo   = s:dir_cache.s:slash.'undo'

let s:file_local = s:dir_vim.s:slash.'vimrc.local'
let s:file_plug  = s:dir_autoload.s:slash.'plug.vim'
let s:file_info  = s:dir_cache.s:slash.'info'

" mkdir
function! s:mkdir(dir) abort
	if !isdirectory(a:dir)
		call mkdir(a:dir, 'p', 0700)
	endif
endfunction

call s:mkdir(s:dir_cache)
call s:mkdir(s:dir_autoload)
call s:mkdir(s:dir_plug)
call s:mkdir(s:dir_backup)
call s:mkdir(s:dir_swap)
call s:mkdir(s:dir_undo)

" runtimepath
execute 'set runtimepath-='.s:dir_vim.' runtimepath^='.s:dir_vim

" ----- preferences -----------------------------

" files
execute 'set viminfo+=n'.escape(s:file_info, '\')
execute 'set backupdir^='.s:dir_backup
execute 'set directory^='.s:dir_swap
execute 'set undodir^='.s:dir_undo

" gui
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=i
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

" font
if has('gui_win32') | set guifont=MS_Gothic:h10 | endif

" file handling
filetype plugin indent on
set fencs-=ucs-bom fencs-=utf-8 fencs-=cp932 fencs^=cp932 fencs^=utf-8 fencs^=ucs-bom
set ffs-=unix ffs^=unix
set autoread
set hidden

" ui
syntax enable
set number
set tabstop=4
set shiftwidth=4
let g:vim_indent_cont = 4
set pumheight=10
set laststatus=1
set ruler
set cursorline
set wildmenu
set wildchar=<Tab>
set background=dark
set lazyredraw

" IM
inoremap <silent><ESC> <ESC>:set iminsert=0 imsearch=0<CR>

" mapping
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ----- plugins ---------------------------------
if isdirectory(s:dir_autoload) && !filereadable(s:file_plug) && executable('curl')
	silent execute '!curl -fLo '.s:file_plug.' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	redraw!
endif

if isdirectory(s:dir_plug) && filereadable(s:file_plug) && executable('git')
	" initialize
	call plug#begin(s:dir_plug)
		Plug 'cocopon/vaffle.vim'
		Plug 'thinca/vim-quickrun'
		if has('unix') && executable('sudo') | Plug 'vim-scripts/sudo.vim' | endif
		if executable('go') | Plug 'fatih/vim-go', { 'tag': '*' } | endif
		if executable('rustc') | Plug 'rust-lang/rust.vim' | endif
		if !has('win32') || has('gui_running') | Plug 'w0ng/vim-hybrid' | endif
	call plug#end()

	" functions
	function! s:plugged(name)
		return has_key(g:plugs, a:name)
	endfunction
	function! s:installed(name)
		return has_key(g:plugs, a:name) && isdirectory(g:plugs[a:name]['dir'])
	endfunction

	if s:plugged('vaffle.vim')
		let g:vaffle_force_delete = 1
		let g:vaffle_show_hidden_files = 1
	endif

	if s:plugged('vim-go')
		let g:go_fmt_autosave = 0
		let g:go_metalinter_autosave = 0
		autocmd vimrc bufwritepost *.go GoImports
	endif

	if s:installed('vim-hybrid')
		colorscheme hybrid
	endif
endif

" --- local -------------------------------------
if filereadable(s:file_local)
	execute 'source '.s:file_local
endif
