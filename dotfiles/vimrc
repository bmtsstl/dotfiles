" ----- initialize ------------------------------

" nocompatible
if &compatible
	set nocompatible
endif

" encoding
set termencoding=default
set encoding=utf-8
scriptencoding utf-8

" autocmd
augroup vimrc
	autocmd!
augroup END

" files & directories
let s:dir_vim      = expand('<sfile>:p:h')
let s:dir_autoload = s:dir_vim.'/autoload'
let s:dir_cache    = s:dir_vim.'/cache'

let s:dir_plug   = s:dir_cache.'/plug'
let s:dir_backup = s:dir_cache.'/backup'
let s:dir_swap   = s:dir_cache.'/swap'
let s:dir_undo   = s:dir_cache.'/undo'

let s:file_local = s:dir_vim.'/vimrc.local'
let s:file_plug  = s:dir_autoload.'/plug.vim'
let s:file_info  = s:dir_cache.'/info'

" mkdir
function! s:mkdir(dir) abort
	if !isdirectory(a:dir)
		call mkdir(a:dir, 'p', 0700)
	endif
endfunction

call s:mkdir(s:dir_autoload)
call s:mkdir(s:dir_cache)
call s:mkdir(s:dir_plug)
call s:mkdir(s:dir_backup)
call s:mkdir(s:dir_swap)
call s:mkdir(s:dir_undo)

" runtimepath
execute 'set runtimepath-='.s:dir_vim.' runtimepath^='.s:dir_vim

" ----- preferences -----------------------------

" viminfo
if has('viminfo')
	execute 'set viminfo+=n'.escape(s:file_info, '\')
endif

" backup
execute 'set backupdir^='.s:dir_backup
set backup writebackup

" swap
execute 'set directory^='.s:dir_swap
set swapfile

" undo
if has('persistent_undo')
	execute 'set undodir^='.s:dir_undo
	set undofile
endif

" gui
set guioptions-=a guioptions-=P guioptions-=A
set guioptions+=c
set guioptions-=e
set guioptions-=i
set guioptions-=m guioptions+=M
set guioptions-=T
set guioptions-=r guioptions-=R
set guioptions-=l guioptions-=L
set guioptions-=b
set guioptions-=F

if has('gui_win32')
	set guifont-=MS_Gothic:h10 guifont^=MS_Gothic:h10
	set guifont-=Consolas:h10 guifont^=Consolas:h10
	set guifontwide-=MS_Gothic guifontwide^=MS_Gothic
	set guifontwide-=BIZ_UDゴシック guifontwide^=BIZ_UDゴシック
endif

if has('directx')
   	set renderoptions=type:directx,renmode:5
endif

" file handling
filetype plugin indent on
set fencs-=ucs-bom fencs-=utf-8 fencs-=cp932 fencs^=cp932 fencs^=utf-8 fencs^=ucs-bom
set ffs-=unix ffs^=unix
set autoread
set hidden

" view
syntax enable
set number
set tabstop=4
set shiftwidth=4
let g:vim_indent_cont = 4
set scrolloff=5
set pumheight=10
set display+=lastline
set laststatus=1
set nowrap
set ruler
set cursorline
set hlsearch
set wildmenu
set wildchar=<Tab>
set background=dark
set lazyredraw

if has('termguicolors')
	set termguicolors
	if $TERM == 'tmux-256color' || $TERM == 'screen-256color'
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif
endif

" cursor
let &t_SI .= "\e[6 q"
let &t_SR .= "\e[4 q"
let &t_EI .= "\e[2 q"

" IM
inoremap <silent><ESC> <ESC>:<C-u>set iminsert=0 imsearch=0<CR>

" mapping
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <BS> <C-w>h
nnoremap <C-z> <C-w>z
nnoremap <C-t> <C-w>T

" [python] warn when venv is not activated
function! s:python_check_venv() abort
	if !exists('$VIRTUAL_ENV')
		echohl WarningMsg
		echon ' [novenv]'
		echohl None
	endif
endfunction
autocmd vimrc FileType python call s:python_check_venv()

" ----- interfaces ------------------------------

" python
if exists('+pythonthreedll') && executable('python37.dll')
	set pythonthreedll=python37.dll
endif

" ----- plugins ---------------------------------
if isdirectory(s:dir_autoload) && !filereadable(s:file_plug) && executable('git')
	function! s:install_plug()
		let l:tmp = tempname()
		let l:out = ''
		try
			let l:out = system('git clone --depth 1 https://github.com/junegunn/vim-plug.git "'.l:tmp.'"')
			if v:shell_error
				echohl ErrorMsg
				echomsg "Error installing vim-plug".l:out
				echohl None
				return 1
			endif
			call rename(l:tmp.'/plug.vim', s:file_plug)
		finally
			call delete(l:tmp, 'rf')
		endtry
	endfunction
	call s:install_plug()
endif

if isdirectory(s:dir_plug) && filereadable(s:file_plug) && executable('git')
	call plug#begin(s:dir_plug)

	" vaffle.vim
	Plug 'cocopon/vaffle.vim'
	let g:vaffle_force_delete = 1
	let g:vaffle_show_hidden_files = 1

	" vim-quickrun
	Plug 'thinca/vim-quickrun'
	if has('job') && exists('*ch_close_in')
		let g:quickrun_config = get(g:, 'quickrun_config', {})
		let g:quickrun_config['_'] = get(g:quickrun_config, '_', {})
		let g:quickrun_config['_']['runner'] = 'job'
	endif

	" vim-fugitive
	Plug 'tpope/vim-fugitive'

	" sudo.vim
	if has('unix') && executable('sudo')
		Plug 'vim-scripts/sudo.vim'
	endif

	" vim-go
	if executable('go')
		Plug 'fatih/vim-go', { 'tag': '*', 'do': ':GoUpdateBinaries' }
		let g:go_fmt_autosave = 0
		let g:go_metalinter_autosave = 0
		autocmd vimrc BufWritePost *.go GoImports
	endif

	" vim-lsp
	if has('job') && has('timers') && has('lambda')
		Plug 'prabirshrestha/vim-lsp'
		Plug 'prabirshrestha/async.vim'

		function! s:lsp_setup() abort
			setlocal omnifunc=lsp#complete
			nmap <buffer> gd <Plug>(lsp-definition)

			" FIXME: reloading vimrc will remove this autocmd
			autocmd vimrc BufWrite <buffer> silent LspDocumentFormatSync
		endfunction

		if executable('pyls')
			autocmd vimrc User lsp_setup call lsp#register_server({
				\ 'name': 'pyls',
				\ 'cmd': ['pyls'],
				\ 'whitelist': ['python'],
				\ })
			autocmd vimrc FileType python call s:lsp_setup()
		endif
	endif

	" iceberg.vim
	if !has('win32') || has('gui_running')
		Plug 'cocopon/iceberg.vim', {'do': ':colorscheme iceberg'}

		" iceberg.vim will check &t_Co, but &t_Co has not been initialized yet.
		set t_Co=256	" workaround

		function! s:load_colorscheme_if_possible(name) abort
			try
				execute 'colorscheme '.a:name
			catch /^Vim\%((\a\+)\)\=:E185/
			endtry
		endfunction
		autocmd vimrc User plug_end call s:load_colorscheme_if_possible('iceberg')
	endif

	" vimdoc-ja
	Plug 'vim-jp/vimdoc-ja'
	set helplang=ja

	call plug#end()
	doautocmd vimrc User plug_end
endif

" --- local -------------------------------------
if filereadable(s:file_local)
	execute 'source '.s:file_local
endif
